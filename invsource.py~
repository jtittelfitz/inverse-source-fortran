##
## Python/fortran program to implement reconstruction of multiple-source seismic event, in two main parts: 
## Simulation:
##   First, some number of seismic events are simulated, and boundary data is collected
##   Next, boundary data from each event is superimposed, into single set of boundary data.
## Reconstruction:
##   Now, from this boundary data, solve elliptic boundary value problem, and reverse time boundary value problem
##    to recover "reflected" wave (has erroneous reflections-in-time before source times)
##   Use criteria {velocity high, displacement zero at source time/location} to find sources
##   Iteratively subtract effect of found source, repeat until all sources are found (residual energy is low)

## Fortran methods are in PDE.f90; to compile, run included script, or
## "f2py -c --fcompiler=gnu95 --f90flags=-ffree-form -m PDE PDE.f90"
## followed by "ipython invsource.py"

import PDE
import numpy as np
import scipy as sp
import pylab as pl
from matplotlib import animation
import Image

## tic and toc functions, stolen from http://stackoverflow.com/questions/5849800/tic-toc-functions-analog-in-python

def tic():
    #Homemade version of matlab tic and toc functions
    import time
    global startTime_for_tictoc
    startTime_for_tictoc = time.time()

def toc():
    import time
    if 'startTime_for_tictoc' in globals():
        print "Elapsed time is " + str(time.time() - startTime_for_tictoc) + " seconds."
    else:
        print "Toc: start time not set"

tic()

##
## main program parameters
##

scale = 2
movie = True; write = False; show = False; show_effects = False  ## output options (show movies, write results to file, show sources, effects of subtracting sources)
approx_speed = True; ## compute reconstructions with approximate speed?

h = 0.0125*scale; k = 0.0025*scale ## space and time step size
r_Rn = 5.; r_omega = 2.            ## spatial dimensions of grid and subgrid
N_grid_omega = 2*int(r_omega/h) + 1; N_grid_Rn = 2*int(r_Rn/h) + 1 ## number of gridpoints for this spatial size and step size
r_Rn = h*(N_grid_Rn - 1)/2         ## 
T = 4; T_grid = int(T/k) + 1       ## main time interval, and corresponding number of steps
L = (N_grid_Rn - N_grid_omega)/2   ## shortcut to indices of edges of subgrid
R = N_grid_Rn - (N_grid_Rn - N_grid_omega)/2
zero_tol = 1.0e-4                  ## criteria for determining support of a source
nonzero_tol = 0.5;                 ## criteria for bounding something away from zero 

## data simulation parameters
num_sources =3
randomize_sources = False          ## optionally, randomize the sources

## number of iterations for TAT reconstruction (in practice, only one is needed)
num_iter = 1

## create zero functions for grid and subgrid (will be useful later)
zeros_Rn = np.zeros((N_grid_Rn,N_grid_Rn)); zeros_omega = np.zeros((N_grid_omega,N_grid_omega))

# initialize grid, including mask to designate boundary (where data will be collected)
c = np.zeros((N_grid_Rn,N_grid_Rn)); boundary_mask = np.zeros((N_grid_omega,N_grid_omega))
(c,boundary_mask) = PDE.initialize(c,boundary_mask,h,r_Rn,r_omega)

##
## Data simulation: initial data or source problem -> boundary data
##
print "Beginning data simulation"
Lambda = np.zeros((N_grid_omega,N_grid_omega,T_grid))  ## boundary data

temp = np.zeros((N_grid_omega,N_grid_omega,T_grid))
g = np.zeros((N_grid_Rn,N_grid_Rn))

## set times for sources to occur
if randomize_sources: 
     t_0 = int(T_grid / 4)
     t = np.random.randint(t_0,size=num_sources) + 1
else:     
     t = [0., 0.25, 0.5]; 

## set locations (and size) of sources, then for each source,
## propagate forward in time and collect boundary data
for t_j in t:
     #tic()
     if randomize_sources:
          x_0 = np.random.uniform(-r_omega/4,r_omega/4)
          y_0 = np.random.uniform(-r_omega/4,r_omega/4)
          r = np.random.uniform(r_omega/8,r_omega/4)
     else:
          x_0 = -.5 + 2*t_j
          y_0 = -.5 + 2*t_j
          r = 0.2
     print "Source:",x_0,y_0,r,t_j
     g = PDE.circle(g,x_0,y_0,r,h,r_Rn)
     if show:
          print "Showing true source"
          pl.imshow(g)
          pl.show()
     ## forward wave propagation simulation; store boundary data in temporary array     
     temp = PDE.forward(temp,zeros_Rn,g,c,h,k,boundary_mask)
     
     ## Superimpose just-simulated boundary data      
     Lambda[:,:,int(t_j/k) + 1:T_grid] = Lambda[:,:,int(t_j/k) + 1:T_grid] + temp[:,:,0:T_grid-int(t_j/k)-1 ]
     #toc()
print "Done with data simulation"

##
## Reconstruction, starting with "TAT" reversal: solve elliptic, reverse problem; iterate if desired (forward, elliptic, reverse)
##

if approx_speed:
     c = PDE.newspeed(c,h,r_Rn,r_omega)

## elliptic boundary value problem
phi = np.zeros((N_grid_omega,N_grid_omega))
phi = PDE.elliptic(phi,Lambda,c,h,boundary_mask)

if show:
     print "Solution of elliptic equation"
     pl.imshow(phi)
     pl.show()

if num_iter == 1:
     ## time reversed boundary value problem, if we're only performing one iteration
     v = np.zeros((N_grid_omega,N_grid_omega,T_grid))
     v = PDE.reversemovie(v,Lambda,phi,zeros_omega,c,h,k,boundary_mask)
else:     
     ## iterated time reversal
     f = np.zeros((N_grid_Rn,N_grid_Rn))
     solution = np.zeros((N_grid_omega,N_grid_omega))
     v = np.zeros((N_grid_omega,N_grid_omega))
     v = PDE.reverse(v,Lambda,phi,zeros_omega,c,h,k,boundary_mask)
     solution = v     
     f[L:R,L:R] = v
     if show: 
          pl.imshow(solution); pl.show()
          
     for n in range(1,num_iter):
          Lambda = PDE.forward(Lambda,f,zeros_Rn,c,h,k)
          phi = PDE.elliptic(phi,Lambda,c,h,boundary_mask)
          if n == num_iter-1:
               v = np.zeros((N_grid_omega,N_grid_omega,T_grid))
               v = PDE.reversemovie(v,Lambda,phi,zeros_omega,c,h,k,boundary_mask)
          else:
               v = PDE.reverse(v,Lambda,phi,zeros_omega,c,h,k,boundary_mask)
               # f - v(0) is next term of Neumann series and initial data for next iteration     
               solution = solution + f[L:R,L:R] - v
               f[L:R,L:R] = f[L:R,L:R] - v
          if show: 
               pl.imshow(solution); pl.show()
               
if movie:     
     print "Movie of new waveform (all sources, with reflections in time)"
     fig = pl.figure()
     if write: 
          for i in range(1,T_grid):
               pl.imshow(v_t[:,:,i])
               filename = "image/frame{0}.png".format(i)
               pl.savefig(filename)
     else:
          def animate(i):
               return pl.imshow(v[:,:,i])
          anim = animation.FuncAnimation(fig, animate, frames=T_grid/3, interval=10)
          pl.show()


##
## Identification of sources
##

j = 0
v_t = np.zeros((N_grid_omega,N_grid_omega,T_grid))
time = 1

while j < 3: 
     
     v_t = PDE.velocity(v,v_t,k)  ## calculate wave's velocity
     if j == 0:   ## calculate kinetic energy maximum for later use (evaluating success of method)
       l2_norm = np.zeros((T_grid))
       l2_norm = PDE.l2norm(l2_norm,v_t);
       orig_energy = (h)*max(l2_norm);
       print orig_energy
     
     mask = np.zeros((N_grid_omega,N_grid_omega), dtype=bool)

     (time,mask) = PDE.support_mask(time,mask,v,v_t,zero_tol,nonzero_tol)  ## look for time and location where velocity > 0, displacement = 0 (up to some tolerance)
     print "Max at",time
     
     ## the source is equal to the velocity of the wave, at the time and location indicated by the mask
     g[L:R,L:R] = np.multiply(v_t[:,:,time-1],mask) #fortran vs. python indexing
     if show:
          print "Displaying Source"
          pl.imshow(g)
          pl.show()
          pl.imshow(np.multiply(v[:,:,time-1],mask))
          pl.colorbar()
          pl.show()

     ## run forward simulation using this recovered source, and then subtract its effect
     temp = np.zeros((N_grid_omega,N_grid_omega,T_grid))
     temp = PDE.forwardmovie(temp,zeros_Rn,g,c,h,k)
     w = np.zeros((N_grid_omega,N_grid_omega,T_grid))
     w = PDE.oddreflect(w,temp,time)
     temp = None
     v = v - w
     
     if show_effects:
          print "Showing effect at true source times:"
          v_t = PDE.velocity(v,v_t,k)
          for t_j in t: #range(1,100):     
               print "Displacement"
               pl.imshow(np.multiply(v_t[:,:,t_j-1],mask))
               pl.colorbar()
               pl.show()
               
               pl.imshow(np.multiply(v_t[:,:,t_j],mask))
               pl.colorbar()
               pl.show()
               
               pl.imshow(np.multiply(v_t[:,:,t_j+1],mask))
               pl.colorbar()
               pl.show()
               print "Velocity",t_j
               pl.imshow(v_t[:,:,t_j-1])
               pl.colorbar()
               pl.show()

               pl.imshow(v_t[:,:,t_j])
               pl.colorbar()
               pl.show()
               
               pl.imshow(v_t[:,:,t_j+1])
               pl.colorbar()
               pl.show()


     if movie:     
          print "Movie of new waveform (source subtracted)"
          fig = pl.figure()
          if write: 
               for i in range(1,T_grid):
                    pl.imshow(v_t[:,:,i])
                    filename = "image/frame{0}.png".format(i)
                    pl.savefig(filename)
          else:
               #def animate(i):
               #     return pl.imshow(v[:,:,i])
               anim = animation.FuncAnimation(fig, animate, frames=T_grid/3, interval=50)
               pl.show()

     j = j + 1
     
## compute residual (relative) energy to see how well reconstruction worked:
v_t = PDE.velocity(v,v_t,k);
l2_norm = PDE.l2norm(l2_norm,v_t);
print "Residual energy: ",h*max(l2_norm)/orig_energy 

toc()




